<!-- 
Copyright 2014 Jesse Shaffer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project name="CFArango" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:ac="antlib:net.sf.antcontrib">
	
	<!--
	================
	Build properties
	================
	-->	
	<property name="src.dir"			location=""/>
	<property name="src.ext.dir"		location="extension"/>
	<property name="build.dir"			location="build"/>
	<property name="output.tests.dir"	location="test-results"/>
	<property name="dist.dir"			location="${build.dir}/dist"/>
	<property name="src.compile.dir"	location="${build.dir}/compile-source"/>
	<property name="runtimes.dir"		location="${build.dir}/runtimes"/>
	
	<property name="ext.file"			value="${dist.dir}/${ant.project.name}.zip"/>
	<property name="ext.src.file"		value="${dist.dir}/${ant.project.name}-src.zip"/>
	
	<property name="server.name"		value="localhost" />
	<property name="server.port.http"	value="8099" />
	<property name="server.port.stop"	value="8899" />

	<property name="railo.version"		value="42" />

	<condition property="runtimes.railo.installed" value="true" else="false">
		<and>
			<available file="${runtimes.dir}/railo/start.jar" />
		</and>
	</condition>
	<condition property="runtimes.mxunit.installed" value="true" else="false">
		<available file="${runtimes.dir}/railo/webroot/mxunit/index.cfm" />
	</condition>
	<condition property="runtimes.test.installed" value="true" else="false">
		<and>
			<istrue value="${runtimes.railo.installed}" />
			<istrue value="${runtimes.mxunit.installed}" />
		</and>
	</condition>
	
	<tstamp prefix="stamp">
	</tstamp>
	<tstamp prefix="created">
		<format property="TODAY" pattern="MM/dd/yyyy" locale="en,US"/>
		<format property="TSTAMP" pattern="HH:mm" locale="en,US"/>
	</tstamp>
	
	<property file="build.properties" />
	
	<taskdef resource="net/sf/antcontrib/antlib.xml" uri="antlib:net.sf.antcontrib">
		<classpath>
			<fileset file="${build.dir}/scripts/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<macrodef name="executeRailoTask">
		<attribute name="task" />
		<sequential>
			<parallel>
				<!-- server startup -->
				<java jar="${runtimes.dir}/railo/start.jar" fork="true" dir="${runtimes.dir}/railo" outputproperty="log.railo.server.startup" failonerror="true">
					<jvmarg value="-Djetty.port=${server.port.http}"/>
					<jvmarg value="-DSTOP.PORT=${server.port.stop}"/>
					<jvmarg value="-DSTOP.KEY=railo"/>
				</java>
				<sequential>
					<!-- wait for server to be ready, tell the user what's going on -->
					<echo message="Waiting Railo server startup..." />
					<sleep seconds="30"/>
					<echo message="done." />
					
					<!-- run task - the server is running now... -->
					<ac:antcallback target="@{task}" inheritall="true" inheritrefs="true" return="mxunit.failed, mxunit.error" />
		
					<!-- server shutdown -->
					<echo message="Shutdown server" />
					<java jar="${runtimes.dir}/railo/start.jar" fork="true" dir="${runtimes.dir}/railo" outputproperty="log.railo.server.shutdown">
						<jvmarg value="-DSTOP.PORT=${server.port.stop}"/>
						<jvmarg value="-DSTOP.KEY=railo"/>
						<arg value="--stop"/>
					</java>
				</sequential>
			</parallel>
		</sequential>
	</macrodef>
	
	<!--
	===========
	Build setup
	===========
	-->
	<target name="init" unless="${initialized}">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${runtimes.dir}"/>
		<mkdir dir="${src.compile.dir}"/>
		<property name="initialized" value="true" />
	</target>
	
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>

	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="install-ivy">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" verbose="true" />
	</target>
	
	<target name="install-arangodb-travis" depends="init">
		<property name="arangodb.version" value="2.1" />
		<get src="http://www.arangodb.org/repositories/travisCI/setup_arangodb_${arangodb.version}.sh" dest="${runtimes.dir}" usetimestamp="true" verbose="true" />
		<exec executable="sh">
			<arg value="${runtimes.dir}/setup_arangodb_2.1.sh"/>
		</exec>
	</target>
	
	<target name="install-railo" unless="${runtimes.railo.installed}" depends="init">
		<ivy:retrieve conf="railo${railo.version}" pattern="${runtimes.dir}/[artifact].[ext]" />
		<unzip dest="${runtimes.dir}/railo" src="${runtimes.dir}/railo.express.jetty.zip"></unzip>
	</target>
	
	<target name="install-mxunit" unless="${runtimes.mxunit.installed}" depends="install-railo">
		<get src="${url.mxunit.download}" dest="${runtimes.dir}/mxunit.zip" usetimestamp="true" verbose="true" />
		<unzip dest="${runtimes.dir}/railo/webroot/mxunit" src="${runtimes.dir}/mxunit.zip">
		    <patternset>
		        <include name="mxunit-master/**"/>
		    </patternset>
		    <mapper>
		        <globmapper from="mxunit-master/*" to="*"/>
		    </mapper>
		</unzip>
	</target>
	
	<target name="install-compilerservice" depends="install-railo">
		<get src="https://github.com/dajester2013/RailoCompilerService/releases/download/v1.o/rcs.war" dest="${runtimes.dir}/rcs.zip" usetimestamp="true" verbose="true" />
		<unzip dest="${runtimes.dir}/railo/webroot/rcs" src="${runtimes.dir}/rcs.zip" />
	</target>
	
	<target name="setup-tests-libs" depends="install-railo,install-mxunit" description="Installs the library to the local build runtime for tests.">
		<delete dir="${runtimes.dir}/railo/webroot/org" />
		<delete dir="${runtimes.dir}/railo/webroot/tests" />
		<copy todir="${runtimes.dir}/railo/webroot">
			<fileset dir="${src.dir}" includes="org/**" />
			<fileset dir="${src.dir}" includes="tests/**" />
		</copy>
	</target>
	
	<!--
	===============
	Compile targets
	===============
	-->

	<target name="compile-railo" depends="init,install-compilerservice" description="Compile code" if="url.compilerservice">
		<!-- call the compiler service -->
		<get src="${url.compilerservice}" dest="${build.dir}/compile-output.log" /><!-- copy the source code to compile to a separate directory -->
		<!-- clean up the log file... -->
		<replaceregexp file="${build.dir}/compile-output.log" match="&lt;\/?(br|pre)\s*\/?>" replace="&#xD;" flags="g" />
	</target>
	
	<!--
	============
	Test targets
	============
	-->
	<target name="test-railo" depends="install-railo,install-mxunit,setup-tests-libs" description="Run unit tests">
		<property name="mxunit.jar" value="${runtimes.dir}/railo/webroot/mxunit/ant/lib/mxunit-ant.jar" />
		
		<echo message="Executing Railo Tests..." />
		<executeRailoTask task="run-mxunit" />
		
		<fail if="mxunit.error" message="An error occured running MXUnit" />
		<fail if="mxunit.failed" message="At least one unit test failed" />
	</target>
		
	
	<target name="run-mxunit">
		<taskdef classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" name="mxunittask"/>
		<delete dir="${output.tests.dir}"/>
		<mkdir dir="${output.tests.dir}"/>
		<mxunittask	defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
					outputdir="${output.tests.dir}"
					port="${server.port.http}" server="${server.name}"
					testResultsSummary="cfarango.summary"
					verbose="true"
					errorproperty="mxunit.error"
					failureproperty="mxunit.failed">
			<directory
				componentPath="tests"
				packageName="tests"
				path="/tests/"
				recurse="true"
				remoteMethod="run"/>
		</mxunittask>
		
		<property name="test.msg" value="mxunit....done" />
	</target>
	
	<!--
	=====================
	Build and run targets
	=====================
	--><!-- depends="test" -->

	<target name="build-railo-archive" depends="test-railo">
		<copy todir="${src.compile.dir}">
			<fileset dir="${src.dir}" includes="org/**" />
		</copy>
		
		<executeRailoTask task="call-railo-compiler-service"/>
	</target>

	<target name="build-railo-extension" depends="init,build-railo-archive" description="Create extension archive">
		<copy file="LICENSE" tofile="${src.ext.dir}/license.txt" overwrite="true" />
		<copy file="${src.ext.dir}/config.tpl.xml" tofile="${src.ext.dir}/config.xml" overwrite="true" />
		<replace file="${src.ext.dir}/config.xml" token="{version}" value="${version}.${stamp.DSTAMP}${stamp.TSTAMP}" />
		<replace file="${src.ext.dir}/config.xml" token="{created}" value="${created.TODAY} ${created.TSTAMP}" />

		<zip destfile="${ext.file}">
			<zipfileset includes="**" excludes="**/config.tpl.xml" dir="${src.ext.dir}" />
			<zipfileset includes="*.ra" dir="${dist.dir}" />
		</zip>
		
		<delete file="${src.ext.dir}/config.xml" />
		<delete file="${src.ext.dir}/license.txt" />
	</target>

	<!--
	=============
	Clean targets
	=============
	-->
	<target name="clean" description="Cleanup build files">
		<delete dir="${src.compile.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${runtimes.dir}" />
		<delete dir="${output.tests.dir}"/>
	</target>

</project>
