<!-- 
Copyright 2014 Jesse Shaffer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project name="CFArango" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<!--
	================
	Build properties
	================
	-->	
	<property name="src.dir"			location=""/>
	<property name="src.ext.dir"		location="extension"/>
	<property name="build.dir"			location="build"/>
	<property name="output.tests.dir"	location="test-results"/>
	<property name="dist.dir"			location="${build.dir}/dist"/>
	<property name="src.compile.dir"	location="${build.dir}/compile-source"/>
	
	<property name="ext.file"			value="${dist.dir}/${ant.project.name}.zip"/>
	<property name="ext.src.file"		value="${dist.dir}/${ant.project.name}-src.zip"/>
	
	<property name="server.name"		value="localhost" />
	<property name="server.port.http"	value="8099" />
	<property name="server.port.stop"	value="8899" />

	<tstamp prefix="stamp">
	</tstamp>
	<tstamp prefix="created">
		<format property="TODAY" pattern="MM/dd/yyyy" locale="en,US"/>
		<format property="TSTAMP" pattern="HH:mm" locale="en,US"/>
	</tstamp>
	
	<property file="build.properties" />
	
	<!--
	===========
	Build setup
	===========
	-->
	<target name="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${src.compile.dir}"/>
	</target>
	
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>

	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="install-ivy" unless="offline">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<!--
	===============
	Compile targets
	===============
	-->

	<target name="compile-railo" depends="init" description="Compile code" if="url.compilerservice">
		<!-- copy the source code to compile to a separate directory -->
		<copy todir="${src.compile.dir}">
			<fileset dir="${src.dir}" includes="org/**" />
		</copy>
		
		<!-- call the compiler service -->
		<get src="${url.compilerservice}" dest="${build.dir}/compile-output.log" />
		
		<!-- clean up the log file... -->
		<replaceregexp file="${build.dir}/compile-output.log" match="&lt;\/?(br|pre)\s*\/?>" replace="&#xD;" flags="g" />
	</target>

	<!--
	===============
	Package targets
	===============
	-->

	<!--<target name="package-compiled" description="Add the compiled code to the build package." if="pkg.compiled">
		<zip destfile="${ext.file}" update="true">
			<zipfileset includes="*.ra" dir="${dist.dir}" />
		</zip>
	</target>

	<target name="package-source" description="Compile code" if="pkg.source">
		<zip destfile="${ext.file}" update="true">
			<zipfileset includes="**" dir="${src.dir}" prefix="CFArango/org" />
		</zip>
	</target>
		
	<target name="package" description="Create the base package and call the ">
		<zip destfile="${ext.file}">
			<zipfileset includes="**" excludes="**/config.tpl.xml" dir="${src.ext.dir}" />
		</zip>
		
		<antcall target="package-compiled" />
		<antcall target="package-source" />
	</target>-->
	
	<!--
	============
	Test targets
	============
	-->
	<target name="test-railo" description="Run unit tests">
		<ivy:retrieve conf="railo_test" pattern="${build.dir}/deps/[artifact].[ext]" />
		<unzip dest="${build.dir}/deps/railo" src="${build.dir}/deps/railo.express.jetty.zip"></unzip>
		<unzip dest="${build.dir}/deps/railo/webroot/mxunit" src="${build.dir}/deps/mxunit.zip"></unzip>
		<copy todir="${build.dir}/deps/railo/webroot">
			<fileset dir="${src.dir}" includes="org/**" />
			<fileset dir="${src.dir}" includes="tests/**" />
		</copy>
		
		<property name="mxunit.jar" value="${build.dir}/deps/railo/webroot/mxunit/ant/lib/mxunit-ant.jar" />
		
		<parallel>
			<!-- server startup -->
			<java jar="${build.dir}/deps/railo/start.jar" fork="true" dir="${build.dir}/deps/railo" outputproperty="log.railo.server.startup">
				<jvmarg value="-Djetty.port=${server.port.http}"/>
				<jvmarg value="-DSTOP.PORT=${server.port.stop}"/>
				<jvmarg value="-DSTOP.KEY=railo"/>
			</java>
			
			<sequential>
				<!-- wait for server to be ready, tell the user what's going on -->
				<echo message="Waiting server startup..." />
				<sleep seconds="30"/>
				<echo message="done." />
				
				<!-- run mxunit - the server is running now... -->
				<antcall target="run-mxunit" />

				<!-- server shutdown -->
				<echo message="Shutdown server" />
				<java jar="${build.dir}/deps/railo/start.jar" fork="true" dir="${build.dir}/deps/railo" outputproperty="log.railo.server.shutdown">
					<jvmarg value="-DSTOP.PORT=${server.port.stop}"/>
					<jvmarg value="-DSTOP.KEY=railo"/>
					<arg value="--stop"/>
				</java>
			</sequential>
		</parallel>
	</target>
		
	
	<target name="run-mxunit">
		<taskdef classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" name="mxunittask"/>
		<delete dir="${output.tests.dir}"/>
		<mkdir dir="${output.tests.dir}"/>
		<mxunittask	defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
					outputdir="${output.tests.dir}"
					port="${server.port.http}" server="${server.name}"
					testResultsSummary="cfarango.summary"
					verbose="true"
					errorproperty="mxunit.error"
					failureproperty="mxunit.failed">
			<directory
				componentPath="tests"
				packageName="tests"
				path="/tests/"
				recurse="true"
				remoteMethod="run"/>
		</mxunittask>

		<fail if="mxunit.error" message="An error occured running MXUnit" />
		<fail if="mxunit.failed" message="At least one unit test failed" />
	</target>
	
	<!--
	=====================
	Build and run targets
	=====================
	--><!-- depends="test" -->

	<target name="build">

	</target>

	<target name="build-railo-extension" depends="clean,init,test-railo,compile-railo" description="Create extension archive">
		<copy file="LICENSE" tofile="${src.ext.dir}/license.txt" overwrite="true" />
		<copy file="${src.ext.dir}/config.tpl.xml" tofile="${src.ext.dir}/config.xml" overwrite="true" />
		<replace file="${src.ext.dir}/config.xml" token="{version}" value="${version}.${stamp.DSTAMP}${stamp.TSTAMP}" />
		<replace file="${src.ext.dir}/config.xml" token="{created}" value="${created.TODAY} ${created.TSTAMP}" />

		<!--<antcall target="package" />-->
		
		<delete file="${src.ext.dir}/config.xml" />
		<delete file="${src.ext.dir}/license.txt" />
	</target>

	<!--
	=============
	Clean targets
	=============
	-->
	<target name="clean" description="Cleanup build files">
		<delete dir="${src.compile.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${output.tests.dir}"/>
	</target>

</project>